package org.zeith.comm3.alcheng.compat.crafttweaker.modules;

import com.zeitheron.hammercore.api.crafting.impl.ItemStackResult;
import crafttweaker.annotations.ZenRegister;
import crafttweaker.api.item.IIngredient;
import crafttweaker.api.item.IItemStack;
import net.minecraft.item.crafting.Ingredient;
import net.minecraft.util.NonNullList;
import net.minecraft.util.ResourceLocation;
import org.zeith.comm3.alcheng.AlchemicalEnergyMod;
import org.zeith.comm3.alcheng.compat.crafttweaker.CompatCraftTweaker;
import org.zeith.comm3.alcheng.compat.crafttweaker.core.BaseAction;
import org.zeith.comm3.alcheng.compat.crafttweaker.core.InputHelper;
import org.zeith.comm3.alcheng.init.InfoAE;
import org.zeith.comm3.alcheng.init.RegistriesAE;
import org.zeith.comm3.alcheng.recipes.types.RecipeAlchemicalCrafter;
import stanhebben.zenscript.annotations.ZenClass;
import stanhebben.zenscript.annotations.ZenMethod;

import java.util.concurrent.atomic.AtomicInteger;

@ZenClass("mods.alcheng.AlchemicalCrafter")
@ZenRegister
public class AlchemicalCrafter
{
	@ZenMethod
	public static void addShaped(IItemStack output, int energyRate, int processTime, int inputMb, IIngredient[][] inputs)
	{
		CompatCraftTweaker
				.addLateAction(new AddShaped(output, energyRate, processTime, inputMb, inputs));
	}

	@ZenMethod
	public static void addShapeless(IItemStack output, int energyRate, int processTime, int inputMb, IIngredient[] inputs)
	{
		CompatCraftTweaker
				.addLateAction(new AddShapeless(output, energyRate, processTime, inputMb, inputs));
	}

	private static final AtomicInteger AUTOGENERATED = new AtomicInteger(0);

	private static final class AddShaped
			extends BaseAction
	{
		private AddShaped(IItemStack output, int energyRate, int processTime, int inputMb, IIngredient[][] inputs)
		{
			super("AlchemicalCrafterShaped", () ->
			{
				int w = inputs[0].length, h = inputs.length;

				NonNullList<Ingredient> ingreds = NonNullList.withSize(w * h, Ingredient.EMPTY);

				for(int i = 0; i < inputs.length; ++i)
				{
					IIngredient[] row = inputs[i];
					if(w != row.length)
						throw new RuntimeException("Invalid row width at row #" + (i + 1) + " for output " + InputHelper.toStack(output));
					for(int j = 0; j < row.length; ++j)
						if(row[j] != null)
						{
							int idx = j + w * i;
							ingreds.set(idx, InputHelper.toIngredient(row[j]));
						}
				}

				if(ingreds.size() > 0 && ingreds.stream().anyMatch(i -> i != Ingredient.EMPTY && i.getMatchingStacks().length > 0))
					RegistriesAE.ALCHEMICAL_CRAFTER_RECIPES.addRecipe(
							new RecipeAlchemicalCrafter.Shaped(inputMb, processTime, energyRate, new ItemStackResult(InputHelper.toStack(output)), w, h, ingreds)
									.setRecipeName(new ResourceLocation(InfoAE.MOD_ID, "crafttweaker_shaped_autogenerated_" + AUTOGENERATED.getAndIncrement())));
				else
					AlchemicalEnergyMod.LOG.error("Attempted to add shaped alchemical crafter recipe with no/empty inputs! Ignoring.");
			});
		}
	}

	private static final class AddShapeless
			extends BaseAction
	{
		private AddShapeless(IItemStack output, int energyRate, int processTime, int inputMb, IIngredient[] inputs)
		{
			super("AlchemicalCrafterShapeless", () ->
			{
				NonNullList<Ingredient> ingreds = NonNullList.withSize(inputs.length, Ingredient.EMPTY);

				for(int i = 0; i < inputs.length; ++i)
				{
					IIngredient row = inputs[i];
					if(row != null) ingreds.set(i, InputHelper.toIngredient(row));
				}

				if(ingreds.size() > 0 && ingreds.stream().anyMatch(i -> i != Ingredient.EMPTY && i.getMatchingStacks().length > 0))
					RegistriesAE.ALCHEMICAL_CRAFTER_RECIPES.addRecipe(
							new RecipeAlchemicalCrafter.Shapeless(inputMb, processTime, energyRate, new ItemStackResult(InputHelper.toStack(output)), ingreds)
									.setRecipeName(new ResourceLocation(InfoAE.MOD_ID, "crafttweaker_shapeless_autogenerated_" + AUTOGENERATED.getAndIncrement())));
				else
					AlchemicalEnergyMod.LOG.error("Attempted to add shapeless alchemical crafter recipe with no/empty inputs! Ignoring.");
			});
		}
	}
}