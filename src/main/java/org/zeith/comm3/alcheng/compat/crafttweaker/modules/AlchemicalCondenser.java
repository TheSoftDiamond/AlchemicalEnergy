package org.zeith.comm3.alcheng.compat.crafttweaker.modules;

import crafttweaker.annotations.ZenRegister;
import crafttweaker.api.item.IIngredient;
import net.minecraft.util.ResourceLocation;
import org.zeith.comm3.alcheng.compat.crafttweaker.CompatCraftTweaker;
import org.zeith.comm3.alcheng.compat.crafttweaker.core.BaseAction;
import org.zeith.comm3.alcheng.compat.crafttweaker.core.InputHelper;
import org.zeith.comm3.alcheng.init.InfoAE;
import org.zeith.comm3.alcheng.init.RegistriesAE;
import org.zeith.comm3.alcheng.recipes.types.RecipeAlchemicalCondenser;
import stanhebben.zenscript.annotations.ZenClass;
import stanhebben.zenscript.annotations.ZenMethod;

import java.util.concurrent.atomic.AtomicInteger;

@ZenClass("mods.alcheng.AlchemicalCondenser")
@ZenRegister
public class AlchemicalCondenser
{
	@ZenMethod
	public static void add(IIngredient input, int energyRate, int processTime, int resultMb)
	{
		CompatCraftTweaker
				.addLateAction(new Add(input, energyRate, processTime, resultMb));
	}

	private static final AtomicInteger AUTOGENERATED = new AtomicInteger(0);

	private static final class Add
			extends BaseAction
	{
		private Add(IIngredient input, int energyRate, int processTime, int resultMb)
		{
			super("AlchemicalCondenser", () -> RegistriesAE.ALCHEMICAL_CONDENSER_RECIPES.addRecipe(new RecipeAlchemicalCondenser(InputHelper.toIngredient(input), processTime, energyRate, resultMb).setRecipeName(new ResourceLocation(InfoAE.MOD_ID, "crafttweaker_autogenerated_" + AUTOGENERATED.getAndIncrement()))));
		}
	}
}